import webapp2
import logging
import re
import cgi
import jinja2
import os
import random
import string
import hashlib
import hmac
import Cookie 
import urllib2
import time
from datetime import datetime, timedelta
from google.appengine.ext import db
from xml.dom import minidom


## see http://jinja.pocoo.org/docs/api/#autoescaping
def guess_autoescape(template_name):
   if template_name is None or '.' not in template_name:
      return False
      ext = template_name.rsplit('.', 1)[1]
      return ext in ('html', 'htm', 'xml')

JINJA_ENVIRONMENT = jinja2.Environment(
   autoescape=guess_autoescape,     ## see http://jinja.pocoo.org/docs/api/#autoescaping
   loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
   extensions=['jinja2.ext.autoescape'])

def validLocation(loc):
  #validates coordinate data - to be implemented
  logging.info("location: "+loc)
  if(loc==""):
    logging.info("location is blank")
    return False
  if("," not in loc):
    return False
  lat = loc.split(',')[0]
  lon = loc.split(',')[1]
  logging.info("lat: "+lat+" lon: "+lon)
  if(isinstance(float(lat), float) and isinstance(float(lon), float)):
    logging.info("location deemed valid")
    return True
  return False

def validData(desc, loc, temp):
  #validates user data to make sure all fields are nonblank
  if(validLocation(loc)):
    if(isinstance(float(temp), float)):
      return True
  return False


class HeatData(db.Model): 
   #database for user submitted data
   location = db.GeoPtProperty() #'user' submitted - should be from android location data
   description = db.TextProperty() #user submitted
   temperature = db.FloatProperty() #'user' submitted- should be from a sensor   
   created = db.DateTimeProperty(auto_now_add = True) #autogenerated - based on entry time to the database NOT when the user recorded the data (should be negligable difference)
   
#standard methords for all classes- mainly pageView handlers and rendering
class MyHandler(webapp2.RequestHandler):
   def write(self, *items):    
      self.response.write(" : ".join(items))

   def render_str(self, template, **params):
      tplt = JINJA_ENVIRONMENT.get_template('templates/'+template)
      return tplt.render(params)

   def render(self, template, **kw):
      self.write(self.render_str(template, **kw))

   def render_json(self, d): #never used- could be removed
      json_txt = json.dumps(d) 
      self.response.headers['Content-Type'] = 'application/json; charset=UTF-8'
      self.write(json_txt)
   
class MainPage(MyHandler):
   def get(self):
      description = self.request.get('description')
      location = self.request.get('location')
      temperature = self.request.get('temperature')
      success = ""
      error = ""
      if(validData(description, location, temperature)):
        entry = HeatData(location=str(location), description=description, temperature=float(temperature))
        entry.put()
        logging.info("user data is valid, put into database")
        success = "Thank you for submitting valid data!"
      elif(description=="" and location=="" and temperature==""):
        #this is for the first render of the website or iff they click enter with totally blank input
        logging.info("blank data received- usual funtion of refreshing page")
      else:
        logging.info("user data is not valid, not entering")
        error = "Invalid input, please try our mobile app"
      self.render("welcome.html", success=success, error=error)

class DataPage(MyHandler):
   def get(self):
    #entering get for the database dumper
    datam = db.GqlQuery("SELECT * FROM HeatData ORDER BY created DESC")
    datar = list(datam)
    self.render("heatData.html", datar=datar)

class APIPage(MyHandler): #for custon user input in the URL - no longer in use
   def get(self, data):
      self.render("heatAPI.html", testing=data)
      
PAGE_RE = r'^/(\S+)'

application = webapp2.WSGIApplication([
                               ('/', MainPage),
                               (r'/data/?', DataPage),
                               (PAGE_RE, APIPage),
                               ],
                              debug=True)
