import webapp2
import logging
import re
import cgi
import jinja2
import os
import random
import string
import hashlib
import hmac
import Cookie 
import urllib2
import time
from datetime import datetime, timedelta
from google.appengine.ext import db
from xml.dom import minidom


## see http://jinja.pocoo.org/docs/api/#autoescaping
def guess_autoescape(template_name):
   if template_name is None or '.' not in template_name:
      return False
      ext = template_name.rsplit('.', 1)[1]
      return ext in ('html', 'htm', 'xml')

JINJA_ENVIRONMENT = jinja2.Environment(
   autoescape=guess_autoescape,     ## see http://jinja.pocoo.org/docs/api/#autoescaping
   loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
   extensions=['jinja2.ext.autoescape'])

def validLocation(loc):
  #validates coordinate data - to be implemented
  return loc

def titleGen():
  #autogenerates 

class HeatData(db.Model): #database for user submitted data
   title = db.StringProperty() #autogenerated for easier accession
   description = db.TextProperty() #user submitted
   temperature = db.FloatProperty() #'user' submitted- should be from a sensor
   coords = db.GeoPtProperty() #'user' submitted - should be from android location data
   created = db.DateTimeProperty(auto_now_add = True) #autogenerated - based on entry time to the database NOT when the user recorded the data (should be negligable difference)
   
#standard methords for all classes- mainly pageView handlers and rendering
class MyHandler(webapp2.RequestHandler):
   def write(self, *items):    
      self.response.write(" : ".join(items))

   def render_str(self, template, **params):
      tplt = JINJA_ENVIRONMENT.get_template('templates/'+template)
      return tplt.render(params)

   def render(self, template, **kw):
      self.write(self.render_str(template, **kw))

   def render_json(self, d): #never used- could be removed
      json_txt = json.dumps(d) 
      self.response.headers['Content-Type'] = 'application/json; charset=UTF-8'
      self.write(json_txt)
   
class MainPage(MyHandler):
   def get(self):
      description = self.request.get('description')
      location = self.request.get('location')
      temperature = self.request.get('temperature')
      self.render("welcome.html", testing="desc: "+description+" loc: "+location+" temp: "+temperature)

class APIPage(MyHandler): #for custon user input in the URL - no longer in use
   def get(self, data):
      self.render("heatAPI.html", testing=data)
      
PAGE_RE = r'^/(\S+)'

application = webapp2.WSGIApplication([
                               ('/', MainPage),
                               (PAGE_RE, APIPage),
                               ],
                              debug=True)
